@page "/edit"
@page "/edit/{historyId}"
@using System.Text.Json;
@using tutorialBlazor.Shared;
@using tutorialBlazor.Client.Helpers;
@inject IJSRuntime javascript
@inject HttpClient Http

<style>
    .card {
        border: 1px solid #ccc;
        border-radius: 10px;
        padding: 20px;
        width: 300px;
        margin: 0 auto;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        background-color: #f8f8f8;
        text-align: center;
    }

        .card input[type="number"],
        .card input[type="text"],
        .card input[type="datetime"] {
            width: 100%;
            padding: 10px;
            margin: 5px 0;
            border: 1px solid #ccc;
            border-radius: 5px;
            outline: none;
            transition: border-color 0.3s ease-in-out;
        }

            .card input[type="number"]:focus,
            .card input[type="text"]:focus,
            .card input[type="datetime"]:focus {
                border-color: #007bff;
            }
</style>
<div style="display: flex; justify-content: space-between;" >
<div class="card">
    <h1> new input </h1>
    <input type="number" placeholder="First Value" />
    <br />
    <input type="number" placeholder="Second Value" />
    <br />
    <input type="text" placeholder="Operation" />
    <br />
    <input type="number" placeholder="Result" />
    <br />
    <input type="datetime" placeholder="Date and Time" />
</div>
@if (@OneHistory != null)
{
<div class="card">
    <h1>old history</h1>
    <p>first value: @OneHistory.Value1 </p>
    <br />
    <p>@OneHistory.Value2 </p>
    <br />
    <p>operation  @OneHistory.Operation</p>
    <br />
    <p>result  @OneHistory.Result</p>
    <br />
    <p>date and time  @OneHistory.DateAndTime</p>
</div>
}
else
{
        <div class="card">
            <h1>THE API IS  NOT WORKING </h1>
          
        </div>
    } 
</div>
@code {
    [Parameter]
    public string HistoryId { get; set; }
    // the paramater has to be string and not guid 

    private History OneHistory;

    public async Task GetById(Guid HistoryId) // idk if  it was as string or as guid 
    {

        var response = await Http.GetAsync($"api/History/{HistoryId}");
        if (response.IsSuccessStatusCode)
        {
            // OneHistory need to be assign;
            OneHistory = await response.Content.ReadFromJsonAsync<History>();


        }
        else
        {
            // Handle the case where the history item is not found or the request fails
            OneHistory = null;
        }
        

    }
}
