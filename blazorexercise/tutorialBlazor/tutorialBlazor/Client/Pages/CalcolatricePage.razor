@page "/Calcolatrice"
@using Microsoft.VisualBasic;
@using static System.Net.WebRequestMethods;
@using tutorialBlazor.Shared;
@using System.Net.Http.Json;


<h1>CalcolatricePage</h1>

<h6>this is a little page to add two numbers</h6>

<div class="card" style="display: flex; flex-wrap: wrap;">
 <input type="number" @bind="Value1" first number />
    <!-- digit buttons for the first value 
        the buttons doesnt work
    -->
   


 <br />
 <input type="number" @bind="Value2" second number />
    <!-- digit buttons for the first value 
        the buttons doesnt work
    -->
  
<br />
<label for="operation"> choose the operation </label>
<br />
<select name="operation" id="operation" @bind="Operation">
    <! -- Pay attention to the bind operation and where you put them -->
    <option value="add"> addition + </option>
<option value="minus"> subtraction - </option>
<option value="multiply"> multiplication X  </option>
<option value="divide"> division  : </option>
<br />
        

</select>
    <div>
        <button type="button" class="operator btn btn-info">+</button>
        <button type="button" class="operator btn btn-info">-</button>
        <button type="button" class="operator btn btn-info">&times;</button>
        <button type="button" class="operator btn btn-info">&divide;</button>

    </div>
<br />

<button class="btn btn-primary" @onclick="Calculation">Calculate</button>

<p>the result @Result </p>

</div>




@code {
    // Add this field at the top of your @code block
    private List<History> Histories = new List<History>();


    private float Value1;
    private float Value2;
    private string Operation = "add"; // default action 
    private float Result = 0;
    DateTime operationDateTime;

    public CalcolatricePage()
    {
    }

    private void Calculation()
    {
        // let's do the switch case 
        operationDateTime = DateTime.Now;

        switch (Operation)
        {
            case "add":
                Result = Value1 + Value2;
                break;
            case "minus":
                Result = Value1 - Value2;
                break;
            case "multiply":
                Result = Value1 * Value2;
                break;
            case "divide":
                if (Value2 != 0)
                {
                    Result = Value1 / Value2;
                }
                else
                {
                    // Handle division by zero error
                    Result = 0;
                }
                break;
        }
        // after performin the operation I want to save the history
        var historyEntry = new History(Value1, Value2, Operation, Result, operationDateTime);

        // Add the history entry to the list
        Histories.Add(historyEntry);

        // Call the API to save the history entry (explained in the next step)
        SaveHistory(historyEntry);


    }
    private async Task SaveHistory(History historyEntry)
    {
        await Http.PostJsonAsync("api/SaveHistory", historyEntry);

    }

}
